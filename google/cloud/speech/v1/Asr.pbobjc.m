// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asr.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Asr.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AsrRoot

@implementation AsrRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AsrRoot_FileDescriptor

static GPBFileDescriptor *AsrRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"streaming_voice"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - VoiceRequest

@implementation VoiceRequest

@dynamic byteBuff;

typedef struct VoiceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *byteBuff;
} VoiceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "byteBuff",
        .dataTypeSpecific.className = NULL,
        .number = VoiceRequest_FieldNumber_ByteBuff,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoiceRequest__storage_, byteBuff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoiceRequest class]
                                     rootClass:[AsrRoot class]
                                          file:AsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoiceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextReply

@implementation TextReply

@dynamic status;
@dynamic msg;
@dynamic segment;
@dynamic id_p;
@dynamic hasResult, result;
@dynamic segmentStart;
@dynamic segmentLength;
@dynamic totalLength;

typedef struct TextReply__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t segment;
  float segmentStart;
  float segmentLength;
  float totalLength;
  NSString *id_p;
  TextReply_Result *result;
  NSString *msg;
} TextReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextReply__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "segment",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_FieldNumber_Segment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TextReply__storage_, segment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TextReply__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = GPBStringifySymbol(TextReply_Result),
        .number = TextReply_FieldNumber_Result,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TextReply__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "segmentStart",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_FieldNumber_SegmentStart,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TextReply__storage_, segmentStart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "segmentLength",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_FieldNumber_SegmentLength,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TextReply__storage_, segmentLength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "totalLength",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_FieldNumber_TotalLength,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TextReply__storage_, totalLength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextReply__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextReply class]
                                     rootClass:[AsrRoot class]
                                          file:AsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextReply__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextReply_Result

@implementation TextReply_Result

@dynamic hypothesesArray, hypothesesArray_Count;
@dynamic final;

typedef struct TextReply_Result__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *hypothesesArray;
} TextReply_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hypothesesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TextReply_Result_Hypothese),
        .number = TextReply_Result_FieldNumber_HypothesesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TextReply_Result__storage_, hypothesesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "final",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_Result_FieldNumber_Final,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextReply_Result class]
                                     rootClass:[AsrRoot class]
                                          file:AsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextReply_Result__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TextReply)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextReply_Result_Hypothese

@implementation TextReply_Result_Hypothese

@dynamic transcript;
@dynamic transcriptNormed;
@dynamic transcriptUrlencoded;
@dynamic transcriptNormedUrlencoded;
@dynamic confidence;
@dynamic likelihood;

typedef struct TextReply_Result_Hypothese__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  float likelihood;
  NSString *transcript;
  NSString *transcriptNormed;
  NSString *transcriptUrlencoded;
  NSString *transcriptNormedUrlencoded;
} TextReply_Result_Hypothese__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transcript",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_Result_Hypothese_FieldNumber_Transcript,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextReply_Result_Hypothese__storage_, transcript),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transcriptNormed",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_Result_Hypothese_FieldNumber_TranscriptNormed,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextReply_Result_Hypothese__storage_, transcriptNormed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transcriptUrlencoded",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_Result_Hypothese_FieldNumber_TranscriptUrlencoded,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TextReply_Result_Hypothese__storage_, transcriptUrlencoded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transcriptNormedUrlencoded",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_Result_Hypothese_FieldNumber_TranscriptNormedUrlencoded,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TextReply_Result_Hypothese__storage_, transcriptNormedUrlencoded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_Result_Hypothese_FieldNumber_Confidence,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TextReply_Result_Hypothese__storage_, confidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "likelihood",
        .dataTypeSpecific.className = NULL,
        .number = TextReply_Result_Hypothese_FieldNumber_Likelihood,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TextReply_Result_Hypothese__storage_, likelihood),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextReply_Result_Hypothese class]
                                     rootClass:[AsrRoot class]
                                          file:AsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextReply_Result_Hypothese__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TextReply_Result)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
